# global rules for when pipelines run
workflow:
  rules:
    # run pipeline for manual tag events
    - if: $CI_COMMIT_TAG
    # run pipeline on merge request events
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # run pipeline on commits to default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # skip pipeline for branches that start with "docs"
    - if: '$CI_COMMIT_REF_NAME =~ /^doc*/i'
      when: never

# include templates
include:
  - local: '/.gitlab-ci/templates.yml'

stages:
  - smoke tests
  - network up
  - airgap up
  - cluster up
  - bigbang up
  - test
  - bigbang down
  - cluster down
  - airgap down
  - network down
  - package
  - release

variables:
  RELEASE_BUCKET: umbrella-bigbang-releases
  AIRGAP_PKG_BUCKET: umbrella-bigbang-airgap
  IMAGE_LIST: images.txt
  IMAGE_PKG: images.tar.gz
  REPOS_PKG: repositories.tar.gz

.bigbang-dogfood:
  tags:
    - bigbang
    - dogfood

.bigbang:
  image: registry.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates/k3d-builder:0.0.1
  extends: .bigbang-dogfood
  after_script:
    - kubectl get all -A
    - kubectl get helmrelease -A

#-----------------------------------------------------------------------------------------------------------------------
# Pre Stage Jobs
#

pre vars:
  image: registry.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates/pre-envs:ubi8.3
  stage: .pre
  extends:
    - .bigbang-dogfood
  artifacts:
    reports:
      dotenv: variables.env
  script:
  # obtain MR and master versions
  - CHART_MR_VERSION=$(sed -n -e 's/^version. //p' chart/Chart.yaml)
  - git fetch && git checkout ${CI_DEFAULT_BRANCH}
  - CHART_MA_VERSION=$(sed -n -e 's/^version. //p' chart/Chart.yaml)
  - git fetch && git checkout ${CI_COMMIT_REF_NAME}
  - echo "CHART_MR_VERSION=$CHART_MR_VERSION" >> variables.env
  - echo "CHART_MA_VERSION=$CHART_MA_VERSION" >> variables.env
  - CHART_VERSION_DIFF=$(./scripts/semver_diff.sh $CHART_MR_VERSION $CHART_MA_VERSION)
  - IFS=. DIFF_ARR=(${CHART_VERSION_DIFF##*-})
  - echo "CHART_VERSION_DIFF=$CHART_VERSION_DIFF" >> variables.env
  # detect breaking change (first two version sections in semver diff)
  - CHART_BREAKING_CHANGE="false"
  - if (( ${DIFF_ARR[0]} > 0 )); then CHART_BREAKING_CHANGE="true"; fi
  - if (( ${DIFF_ARR[1]} > 0 )); then CHART_BREAKING_CHANGE="true"; fi
  # store variables
  - echo "CHART_BREAKING_CHANGE=$CHART_BREAKING_CHANGE" >> variables.env
  - cat variables.env

#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Smoke Tests
#

.chart_changes: &chart_changes
  changes:
    - chart/**/*
    - .gitlab-ci.yml
    - .gitlab-ci/jobs/**/*
    - scripts/**/*
    - tests/**/*

.deploy_bigbang: &deploy_bigbang
  - find ./scripts/deploy -type f -name '*.sh' | sort | xargs -r -I {} sh -c 'echo {} && sh {}'

.test_bigbang: &test_bigbang
  - find ./tests -type f -name '*.sh' | sort | xargs -r -I {} sh -c 'echo {} && sh {}'

.package:
  image: registry.dso.mil/platform-one/big-bang/bigbang/synker:0.0.1
  before_script:
    # Set up auth
    - mkdir -p /root/.docker
    - echo $DOCKER_AUTH_CONFIG > /root/.docker/config.json
  script:
    - cp ./scripts/package/synker.yaml ./synker.yaml

    #Download images needed for airgap
    - ./tests/bash/images.sh
    # Populate images list in synker config
    # NOTE: This is stupid and hacky, use yq or something better to do this
    - cat $IMAGE_LIST | sed -e 's/^/    - /' >> synker.yaml
    - cat $IMAGE_LIST
    - synker pull -b=1

    # Tar up synker as well?
    - cp /usr/local/bin/synker synker.yaml /var/lib/registry/
    - tar -C /var/lib/registry -czvf $IMAGE_PKG .
    - tar -czvf $IMAGE_PKG /var/lib/registry

    # Package dependent repos
    - ./scripts/package/gits.sh
    - tar -czf $REPOS_PKG repos/

    # Prep release
    - mkdir -p release
    - mv $IMAGE_LIST $IMAGE_PKG $REPOS_PKG release/
   
    # Publish packages to s3 release
    - aws s3 sync --quiet release/ s3://${PKG_S3_BUCKET}/umbrella/${PKG_PATH}


clean install:
  stage: smoke tests
  extends:
    - .k3s-ci
  variables:
    CLUSTER_NAME: "clean-${CI_COMMIT_SHORT_SHA}"
  rules:
    - *chart_changes
  script:
    - *deploy_bigbang
    - *test_bigbang

    # Fetch list of all images ran
    - curl -sfL k3s:8081/images | jq -r '.images[].repoTags[0]' > $IMAGE_LIST
  artifacts:
    paths:
      - images.txt
    expire_in: 7 days


upgrade:
  stage: smoke tests
  dependencies:
    - pre vars
  extends:
    - .k3s-ci
  rules:
    # skip job when MR title starts with 'Breaking Change'
    - if: '$CI_MERGE_REQUEST_TITLE =~ /^Breaking Change/'
      when: never
    # run pipeline on merge request events
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *chart_changes
  variables:
    CLUSTER_NAME: "upgrade-${CI_COMMIT_SHORT_SHA}"
  script:
    - if $CHART_BREAKING_CHANGE; then echo "Breaking change detected by chart version difference, skipping job"; exit 0; fi
    - echo "Install Big Bang from ${CI_DEFAULT_BRANCH}"
    - git fetch && git checkout ${CI_DEFAULT_BRANCH}
    - *deploy_bigbang
    - *test_bigbang
    - echo "Upgrade Big Bang from ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    - git reset --hard && git clean -fd
    - git checkout ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
    - *deploy_bigbang
    - *test_bigbang

#-----------------------------------------------------------------------------------------------------------------------
# Infrastructure: Management Jobs
#

# Abstract for job manually triggering infrastructure builds
.infra fork:
  stage: network up
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master" || $CI_MERGE_REQUEST_LABELS =~ /ci/'
      allow_failure: false


# Abstract for jobs responsible for creating infrastructure
.infra create:
  rules:
    # Run on scheduled jobs
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master" || $CI_MERGE_REQUEST_LABELS =~ /ci/'
    # skip job when branch name starts with "hotfix" or "patch"
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^(hotfix|patch)/'
      when: never

# Abstract for jobs responsible for cleaning up infrastructure
.infra cleanup:
  rules:
    # Run on scheduled jobs
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master" || $CI_MERGE_REQUEST_LABELS =~ /ci/'
      allow_failure: true
      when: manual

#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Infrastructure: Networking
#

aws/network up:
  extends:
    - .bigbang-dogfood
    - .infra fork
    - .network up
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    auto_stop_in: 1 hour

aws/network down:
  extends:
    - .bigbang-dogfood
    - .infra cleanup
    - .network down
  stage: network down
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    action: stop
#-----------------------------------------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------------------------------------
# Infrastructure: Airgap Networking
#
airgap/network up:
  extends:
    - .bigbang-dogfood
    - .infra fork
    - .network up
    - .terraformer_airgap
  stage: network up
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}-airgap
    auto_stop_in: 1 hour

airgap/network down:
  extends:
    - .bigbang-dogfood
    - .infra cleanup
    - .network down
    - .terraformer_airgap
  stage: network down
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}-airgap
    action: stop
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Infrastructure: Airgap Utility

# Create Utility Pkgs
aws/airgap/package:
  extends:
    - .bigbang-dogfood
    - .infra fork
    - .package
  variables:
    AIRGAP: "true"
    PKG_S3_BUCKET: '$AIRGAP_PKG_BUCKET'
    PKG_PATH: '$CI_COMMIT_SHORT_SHA'
  stage: network up
  dependencies:
    - clean install

#Delete Generated Packages
aws/airgap/package delete:
  stage: airgap down
  extends:
    - .bigbang-dogfood
    - .package
    - .infra cleanup
  variables:
    PKG_S3_BUCKET: '$AIRGAP_PKG_BUCKET'
    PKG_PATH: '$CI_COMMIT_SHORT_SHA'
  script:
    - aws s3 rm --recursive s3://${PKG_S3_BUCKET}/umbrella/${PKG_PATH}

# Create Utility Instance on AWS
aws/airgap/utility up:
  extends:
    - .bigbang-dogfood
    - .infra create
    - .utility up
    - .terraformer_airgap
  stage: airgap up
  needs:
    - job: airgap/network up
    - job: aws/airgap/package

# Destroy Utility Instance on AWS
aws/airgap/utility down:
  extends:
    - .bigbang-dogfood
    - .infra cleanup
    - .utility down
    - .terraformer_airgap
  stage: airgap down
#-----------------------------------------------------------------------------------------------------------------------



#-----------------------------------------------------------------------------------------------------------------------
# Infrastructure: RKE2
#

# Create RKE2 cluster on AWS
aws/rke2/cluster up:
  stage: cluster up
  extends:
    - .bigbang-dogfood
    - .infra create
    - .rke2 up
  needs:
    - job: aws/network up
    - job: pre vars
      artifacts: true
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}

# Install BigBang on RKE2 cluster on AWS
aws/rke2/bigbang up:
  stage: bigbang up
  extends:
    - .bigbang-dogfood
    - .infra create
    - .bigbang
  needs:
    - job: aws/rke2/cluster up
      artifacts: true
  before_script:
    - mkdir -p ~/.kube
    - cp ${CI_PROJECT_DIR}/rke2.yaml ~/.kube/config
    # Deploy a default storage class for aws
    - kubectl apply -f ${CI_PROJECT_DIR}/.gitlab-ci/jobs/rke2/dependencies/k8s-resources/aws/default-ebs-sc.yaml
  script:
    - *deploy_bigbang
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}

# Run tests on BigBang on RKE2 cluster on AWS
aws/rke2/bigbang test:
  stage: test
  extends:
    - .bigbang-dogfood
    - .infra create
    - .bigbang
  needs:
    - job: aws/rke2/cluster up
      artifacts: true
    - job: aws/rke2/bigbang up
  before_script:
    - mkdir -p ~/.kube
    - cp ${CI_PROJECT_DIR}/rke2.yaml ~/.kube/config
  script:
    ## Move this yum install to the dockerfile for the builder
    ## putting it here now for a quick way to install dig
    - yum install bind-utils -y
    - ./scripts/hosts.sh
    - *test_bigbang
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}

# Uninstall BigBang on RKE2 cluster on AWS
aws/rke2/bigbang down:
  stage: bigbang down
  extends:
    - .bigbang-dogfood
    - .infra cleanup
    - .bigbang
  needs:
    - job: aws/rke2/cluster up
      artifacts: true
    - job: aws/rke2/bigbang test
  before_script:
    - mkdir -p ~/.kube
    - cp ${CI_PROJECT_DIR}/rke2.yaml ~/.kube/config
  script:
    - helm un -n bigbang bigbang
    # TODO: Smarter wait
    - sleep 180
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}

# Destroy RKE2 cluster on AWS
aws/rke2/cluster down:
  stage: cluster down
  extends:
    - .bigbang-dogfood
    - .infra cleanup
    - .rke2 down
  needs:
    - job: aws/rke2/bigbang down
    - job: pre vars
      artifacts: true
  environment:
    name: review/aws-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}

#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Infrastructure:Airgap  RKE2
#
# Create RKE2 cluster on AWS
airgap/rke2/cluster up:
  stage: cluster up
  extends:
    - .bigbang-dogfood
    - .infra create
    - .rke2 airgap up
    - .terraformer_airgap
  needs:
    - job: airgap/network up
    - job: aws/airgap/utility up

# Install BigBang on RKE2 cluster on AWS
airgap/rke2/bigbang up:
  stage: bigbang up
  extends:
    - .bigbang-dogfood
    - .infra create
    - .bigbang
  variables:
    AIRGAP: "true"
  needs:
    - job: airgap/rke2/cluster up
      artifacts: true
  before_script:
    # Replace https with http for git server
    - sed -i 's/https:\/\/repo1.dso.mil/http:\/\/repo1.dso.mil/g' chart/values.yaml  tests/ci/shared-secrets.yaml

    - mkdir -p ~/.kube
    - cp ${CI_PROJECT_DIR}/rke2.yaml ~/.kube/config

    # Deploy a default storage class for aws
    - kubectl apply -f ${CI_PROJECT_DIR}/.gitlab-ci/jobs/rke2/dependencies/k8s-resources/aws/default-ebs-sc.yaml
  script:
    - *deploy_bigbang

# Run tests on BigBang on RKE2 cluster on AWS

airgap/rke2/bigbang test:
  stage: test
  extends:
    - .bigbang-dogfood
    - .infra create
    - .bigbang
  needs:
    - job: airgap/rke2/cluster up
      artifacts: true
    - job: airgap/rke2/bigbang up
  before_script:
    - mkdir -p ~/.kube
    - cp ${CI_PROJECT_DIR}/rke2.yaml ~/.kube/config
  script:
    ## Move this yum install to the dockerfile for the builder
    ## putting it here now for a quick way to install dig
    - yum install bind-utils -y
    - chmod +x scripts/hosts.sh && ./scripts/hosts.sh
    - *test_bigbang

# Uninstall BigBang on RKE2 cluster on AWS
airgap/rke2/bigbang down:
  stage: bigbang down
  extends:
    - .bigbang-dogfood
    - .infra cleanup
    - .bigbang
  needs:
    - job: airgap/rke2/cluster up
      artifacts: true
    - job: airgap/rke2/bigbang test
  before_script:
    - mkdir -p ~/.kube
    - cp ${CI_PROJECT_DIR}/rke2.yaml ~/.kube/config
  script:
    - helm un -n bigbang bigbang
    # TODO: Smarter wait

# Destroy RKE2 cluster on AWS
airgap/rke2/cluster down:
  stage: cluster down
  extends:
    - .bigbang-dogfood
    - .infra cleanup
    - .rke2 airgap down
    - .terraformer_airgap
  needs:
    - job: airgap/rke2/bigbang down
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Release Jobs
#
package:
  stage: package
  extends:
    - .bigbang-dogfood
    - .package
  variables:
    PKG_S3_BUCKET: '$RELEASE_BUCKET'
    PKG_PATH: '$CI_COMMIT_TAG'
  rules:
    # run job for manual tag events
    - if: $CI_COMMIT_TAG
  dependencies:
    - clean install
  after_script: []

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  extends:
    - .bigbang-dogfood
  rules:
    # run job for manual tag events
    - if: $CI_COMMIT_TAG
  variables:
    RELEASE_ENDPOINT: https://${RELEASE_BUCKET}.s3-${AWS_DEFAULT_REGION}.amazonaws.com/umbrella/${CI_COMMIT_TAG}
  script:
    - |
      release-cli create --name "Big Bang v${CI_COMMIT_TAG}" --tag-name ${CI_COMMIT_TAG} \
        --description "Automated release notes are a WIP." \
        --assets-link "{\"name\":\"${IMAGE_LIST}\",\"url\":\"${RELEASE_ENDPOINT}/${IMAGE_LIST}\"}" \
        --assets-link "{\"name\":\"${IMAGE_PKG}\",\"url\":\"${RELEASE_ENDPOINT}/${IMAGE_PKG}\"}" \
        --assets-link "{\"name\":\"${REPOS_PKG}\",\"url\":\"${RELEASE_ENDPOINT}/${REPOS_PKG}\"}"


#-----------------------------------------------------------------------------------------------------------------------
