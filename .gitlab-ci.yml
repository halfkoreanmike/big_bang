.deploy_k3d: &deploy_k3d
  # Starting dnsmasq for cluster dns resolution
  - docker run -d -p 53:53/udp -p 53:53 janeczku/go-dnsmasq:release-1.0.7
  - echo "nameserver 127.0.0.1" >> /etc/resolv.conf

  # Standup cluster
  - k3d cluster create ${K3D_CLUSTER_NAME}  --k3s-server-arg "--disable=traefik" --k3s-server-arg "--disable=metrics-server" -p 80:80@loadbalancer -p 443:443@loadbalancer --wait --agents 1 --servers 1
  - while ! (kubectl get node | grep "agent" > /dev/null); do sleep 3; done
  - kubectl get nodes
  - k3d node list

.deploy_flux: &deploy_flux
  # Install Flux
  - which flux
  - flux --version
  - flux install 
  - kubectl get namespaces,pods,helmrelease,gitrepositories -A

.wait_for_healthy: &wait_for_healthy
  # Wait for healthy
  ## TODO: make this dynamicly include the helmreleases being created instead of hardcoding 
  - sleep 5
  - kubectl get namespaces,pods,helmrelease,kustomizations,gitrepositories -A
  - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n bigbang gatekeeper
  - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n bigbang istio-operator
  - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n bigbang istio
  - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n bigbang monitoring
  - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n bigbang eck-operator
  - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n bigbang ek
  - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n bigbang fluent-bit
  - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n bigbang twistlock
  - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n bigbang cluster-auditor
  - kubectl wait --for=condition=Ready --timeout 30s kustomizations.kustomize.toolkit.fluxcd.io -n bigbang secrets

.do_some_quick_tests: &do_some_quick_tests
  # Place kubernetes package test here
  - echo "Package tests go here"
  - bash ./tests/virtualservices.sh
  - kubectl get helmrelease -A

.check_non_ironbank_images: &check_non_ironbank_images
  - echo "Showing images not from ironbank:"
  # Ignore rancher images since those are from k3d
  - kubectl get pods -A -o jsonpath="{..image}" | tr -s '[[:space:]]' '\n' | sort | uniq -c | grep -v "registry1" | grep -v "rancher"

include:
  - project: 'platform-one/big-bang/pipeline-templates/umbrella-templates'
    ref: BB-621-Network-Up
    file: '/globals.gitlab-ci.yml'
  - project: 'platform-one/big-bang/pipeline-templates/umbrella-templates'
    ref: BB-621-Network-Up
    file: '/jobs/networking/aws/gitlab-ci.yaml'
  - project: 'platform-one/big-bang/pipeline-templates/umbrella-templates'
    ref: BB-621-Network-Up
    file: '/jobs/rke2/gitlab-ci.yaml'

variables:
  CLUSTER_NAME: umbrella-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}

stages:
  # - fast feedback
  - network
  - cluster up
  - cluster cleanup
  - network cleanup

fetch umbrella templates:
  stage: .pre
  extends:
    - .fetch

#
# Network
#
network:up:
  stage: network
  extends:
    - .network plan
    - .terraformer
  before_script:
    - apk add python3 py3-boto3

#  environment:
#    name: $CI_COMMIT_BRANCH
#    url: https://$PROJ_NAME.bigbang.dev
#    on_stop: destroy
#    auto_stop_in: 4 hours

# network:if-fails:
#   stage: network errors
#   extends:
#     - .network destroy
#   when: on_failure

#
# Cluster(s) up
#
rke2:up:
  stage: cluster up
  extends:
    - .rke2 up
    - .terraformer
  variables:
    TFVARFILE: ${CI_PROJECT_DIR}/${TF_ROOT}/var.tfvars
  before_script:
    - apk add bash jq aws-cli curl

    # TODO: Make this more dynamic instead of hardcoding each value individually
    - echo "cluster_name=\"${CLUSTER_NAME}\"" > ${TFVARFILE}
    - echo "vpc_id=$(jq -c .vpc_id.value ${CI_PROJECT_DIR}/outputs.json)" >> ${TFVARFILE}
    - echo "subnets=$(jq -c .private_subnet_ids.value ${CI_PROJECT_DIR}/outputs.json)" >> ${TFVARFILE}
    - cat ${TFVARFILE}

#
# Cluster(s) down
#
rke2:down:
  stage: cluster cleanup
  extends:
    - .rke2 down
    - .terraformer
  when: always

#
# Clean up
#
network:destroy:
  stage: network cleanup
  extends:
    - .network destroy
    - .terraformer
#  environment:
#    name: $CI_COMMIT_BRANCH
#    action: stop
  when: always

# .k3d:
#   tags:
#     - bigbang
#     - privileged
#     - public
#   image: registry.dsop.io/platform-one/private/big-bang/pipeline-templates/k3d-builder:b0b45793
#   services:
#     - docker:dind
#   variables:
#     DOCKER_HOST: tcp://localhost:2375/
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: ""
#   before_script:
#     - *deploy_k3d 
#     - *deploy_flux
#   after_script:
#     - *check_non_ironbank_images
#     # Delete Cluster
#     - k3d cluster delete ${K3D_CLUSTER_NAME}

# fresh install:
#   stage: fast feedback
#   extends: .k3d
#   variables:
#     K3D_CLUSTER_NAME: fresh-install
#   script:
#     - echo "Install Big Bang From Current Branch"
#     # Install Big Bang From Current Branch
#     - helm upgrade -i bigbang chart -n bigbang --create-namespace --set registryCredentials.username='robot$bigbang' --set registryCredentials.password=${REGISTRY1_PASSWORD}
#     - kubectl apply -f examples/complete/envs/dev/source-secrets.yaml
#     - *wait_for_healthy
#     - *do_some_quick_tests

# upgrade from master:
#   stage: fast feedback
#   extends: .k3d
#   variables:
#     K3D_CLUSTER_NAME: upgrade-from-master
#   script:
#     - echo "Install Big Bang From Master"
#     - git fetch
#     - git checkout ${CI_DEFAULT_BRANCH}
#     - helm upgrade -i bigbang chart -n bigbang --create-namespace --set registryCredentials.username='robot$bigbang' --set registryCredentials.password=${REGISTRY1_PASSWORD}
#     - kubectl apply -f examples/complete/envs/dev/source-secrets.yaml
#     - *wait_for_healthy
#     - *do_some_quick_tests

#     - echo "Upgrade Big Bang to Current Branch"
#     - git checkout ${CI_COMMIT_BRANCH}
#     - helm upgrade -i bigbang chart -n bigbang --create-namespace --set registryCredentials.username='robot$bigbang' --set registryCredentials.password=${REGISTRY1_PASSWORD}
#     - kubectl apply -f examples/complete/envs/dev/source-secrets.yaml
#     - *wait_for_healthy
#     - *do_some_quick_tests
#   only:
#     - merge_requests