.k8s-util:
  image: registry.dso.mil/platform-one/big-bang/pipeline-templates/pipeline-templates/k8s-ci:v1.20.4-bb.3

.dind-runner:
  tags:
    - bigbang
    - umbrella
    - privileged
    - dogfood

# In cluster k3s using K3D with the docker daemon as a sidecar
#
#   This will connect to a remote docker daemon over tls tcp (defined at installation of gitlab runners) and create
#   a k3d cluster in a custom built docker bridge network.
#
.k3d-ci:
  extends:
    - .k8s-util
    - .dind-runner
  #  services:
  #      # Added in through gitlab ci configuration, left in incase some poor soul needs to come debug this later
  #    - name: docker:20.10.5-dind
  variables:
    DOCKER_HOST: tcp://localhost:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    DOCKER_DRIVER: overlay2
  before_script:
    # Give docker-in-docker time to come alive
    - i=0; while [ "$i" -lt 12 ]; do docker info &>/dev/null && break; sleep 5; i=$(( i + 1 )) ; done
    - docker network create ${CI_JOB_ID} --driver=bridge -o "com.docker.network.driver.mtu"="1450"
    - k3d cluster create ${CI_JOB_ID} --config tests/ci/k3d/config.yaml --network ${CI_JOB_ID}
    - until kubectl get deployment coredns -n kube-system -o go-template='{{.status.availableReplicas}}' | grep -v -e '<no value>'; do sleep 1s; done
    - kubectl get all -A
  after_script:
    - kubectl get all -A
    - kubectl get gitrepository,helmrelease,kustomizations -A
    - k3d cluster delete ${CI_JOB_ID}
    - docker network rm ${CI_JOB_ID}
